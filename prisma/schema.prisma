// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String        @id @default(cuid())
  email             String?       @unique
  emailVerified     DateTime?
  image             String? // url to profile picture
  accounts          Account[]
  sessions          Session[]
  customerId        String? // stripe identifier
  // biography
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  gender            String?
  ethnicity         String?
  nationality       String?
  firstLang         String?
  // next of kin
  nextOfKinName     String?
  nextOfKinEmail    String?
  nextOfKinPhone    String?
  // marketing
  contactPrefs      String[]
  admin             Boolean       @default(false) // can the user administer other users?
  // meta
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  onboardedAt       DateTime?
  // associations
  ownedDocuments    Document[]    @relation("owner")
  uploadedDocuments Document[]    @relation("uploader")
  applications      Application[]
}

model Document {
  id         String   @id @default(cuid())
  key        String // reference to s3
  raceId     String?
  // associations
  ownedBy    String
  user       User     @relation("owner", fields: [ownedBy], references: [id], onDelete: Cascade)
  uploadedBy String
  uploader   User     @relation("uploader", fields: [uploadedBy], references: [id], onDelete: Cascade)
  // meta
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Application {
  id        String   @id @default(cuid())
  answers   Json?
  raceId    String
  // associations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // meta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submittedAt DateTime? // initial expression of interest has been made
  completedAt DateTime? // additional questions have been finished

  @@unique([raceId, userId]) // user can only apply to each race once
}
